<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>opencv-python使用</title>
      <link href="/2019/10/26/opencv-python-shi-yong/"/>
      <url>/2019/10/26/opencv-python-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="刷新屏幕画板"><a href="#刷新屏幕画板" class="headerlink" title="刷新屏幕画板"></a>刷新屏幕画板</h1><p>当我们在图片上绘制矩形或者圆的时候，我们会碰到想清除画板的情况。这个时候关键的思路是对最初的画板做一个备份，当我们清除原来画板上面的东西的时候，我们只需从这个备份中拷贝一份，然后在这个拷贝的图片上进行重新绘制。示例如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-  </span><span class="token keyword">import</span> cv2<span class="token comment" spellcheck="true"># 读入图片</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'test.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建窗口并展示图片</span>img_copy <span class="token operator">=</span> img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">299</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> key <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">!=</span> <span class="token number">27</span><span class="token punctuation">:</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>    key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> key <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> img_copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#!! your image is reinitialized with initial one</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++封装(上)</title>
      <link href="/2019/10/23/c-feng-zhuang-shang/"/>
      <url>/2019/10/23/c-feng-zhuang-shang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>类的定义与对象实例化</p><p>string类型及属性封装</p><p>类外定义</p><p>构造函数与初始化列表</p><p>析构函数</p></blockquote><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>类是一个抽象的概念，而对象是一个具体的概念。类是根据对象抽象而来，根据不同的目的，同一对象抽象出来的类也可能不尽相同。下面有一个简单的类的示例:</p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<string>//###########<<iostream>>class dog{    public:        void eat();    private:        int age;        string name;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义了一个简单的类，他有数据成员和成员函数。但是当人们使用这个类的时候，只会关心他用到的部分函数，不需要搞明白所有的成员函数。<code>c++</code>中为了进行区分，引进了访问修饰符的概念。在这里用到了两个访问修饰符，分别为<code>public</code>和<code>private</code>。其中<code>public</code>供用户外部调用。而这种也成为<strong>封装</strong>。即只给用户呈现关心的部分，用<code>public</code>来进行修饰。</p><h1 id="对象实例化"><a href="#对象实例化" class="headerlink" title="对象实例化"></a>对象实例化</h1><p>类是一个模板，计算机根据类制造对象就是对象的实例化。有两种方法可供选择，分别是从栈中实例化和从堆中实例化。</p><h2 id="从栈中实例化"><a href="#从栈中实例化" class="headerlink" title="从栈中实例化"></a>从栈中实例化</h2><pre class="line-numbers language-c++"><code class="language-c++">class TV{  public:    char name[20];    int type;    void changeVol();    void power();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>int main(){    TV tv;     //对象的实例化    Tv tv[20]; //对象数组的实例化    return 0；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从堆中实例化"><a href="#从堆中实例化" class="headerlink" title="从堆中实例化"></a>从堆中实例化</h2><pre class="line-numbers language-c++"><code class="language-c++">int main(){    TV *p = new TV();    TV *q = new TV[20];    delete p;    delete []q;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象成员的访问"><a href="#对象成员的访问" class="headerlink" title="对象成员的访问"></a>对象成员的访问</h1><p>栈实例化的对象访问对象成员</p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>int main(){    TV tv;     //对象的实例化    Tv tv[20]; //对象数组的实例化    tv.type = 0;    tv.changeVol();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆实例化的对象访问对象成员</p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>int main(){    TV *p = new TV();    TV *q = new TV[20];    p->type = 0;    p->changeVol();    delete p;    delete []q;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆实例化的对象数组访问对象成员</p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>int main(){    TV *p = new TV[20];    for(int i = 0; i < 5; i++){        p[i]->type = 0;        p[i]->changeVol();    }    delete []p;    p = NULL;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="初始string"><a href="#初始string" class="headerlink" title="初始string"></a>初始<code>string</code></h1><p>从一个小的示例开始</p><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;int main(){    string name = "zhangsan";    string hobby("football");    cout << name << hobby << endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化string对象的方式"><a href="#初始化string对象的方式" class="headerlink" title="初始化string对象的方式"></a>初始化<code>string</code>对象的方式</h2><table><thead><tr><th>使用方法</th><th>解释</th></tr></thead><tbody><tr><td><code>string s1;</code></td><td><code>s1</code>为空字符串</td></tr><tr><td><code>string s2(&quot;abc&quot;);</code></td><td>用字符串字面值初始化<code>s2</code></td></tr><tr><td><code>string s3(s2);</code></td><td>将<code>s3</code>初始化为<code>s2</code> 的一个副本</td></tr><tr><td><code>string s4(n, &#39;c&#39;)</code></td><td>将<code>s4</code>初始化为字符<code>c</code>的<code>n</code>个副本</td></tr></tbody></table><h2 id="string的常用操作"><a href="#string的常用操作" class="headerlink" title="string的常用操作"></a><code>string</code>的常用操作</h2><table><thead><tr><th>使用方法</th><th>介绍</th></tr></thead><tbody><tr><td><code>s.empty()</code></td><td>判断字符串是否为空，为空返回<code>true</code></td></tr><tr><td><code>s.size()</code></td><td>返回字符串的个数</td></tr><tr><td><code>s[n]</code></td><td>返回<code>s</code>中位置为<code>n</code>的字符，位置从<code>0</code>开始</td></tr><tr><td><code>s1+s2</code></td><td>将两个字符串连接成新串，返回新生成的串</td></tr><tr><td><code>s1 = s2</code></td><td>将<code>s1</code>的内容替换成<code>s2</code>的副本</td></tr><tr><td><code>v1 == v2</code></td><td>判定相等，相等返回<code>true</code>，反之返回<code>false</code></td></tr><tr><td><code>v1!=v2</code></td><td>判定不等，不等返回<code>true</code>，反之返回<code>false</code></td></tr></tbody></table><h2 id="string需要注意的地方"><a href="#string需要注意的地方" class="headerlink" title="string需要注意的地方"></a><code>string</code>需要注意的地方</h2><pre class="line-numbers language-c++"><code class="language-c++">string s1 = "hello";string s2("world");string s3 = s1 + s2;string s4 = "hello" + s2;string s5 = "hello" + s2 + "world";string s6 = "hello" + "world"          //错误使用，相加的至少有一个是string类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h1><p>面向对象的思想，倾向于使用成员函数的方式对对象进行操作，而不是直接访问数据成员。这样的好处有很多。比方说</p><ul><li>某些变量我们只想给它只读属性，并不想给它其他的操作，这个时候就可以定义一个成员函数来返回它的值</li><li>当设定某个变量的时候，我们可能需要对变量的赋值进行判断合理之后再进行赋值，这个时候也需要设定成员函数</li></ul><h1 id="类内定义和内联函数"><a href="#类内定义和内联函数" class="headerlink" title="类内定义和内联函数"></a>类内定义和内联函数</h1><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>内联函数使用<code>inline</code>修饰符，将逻辑比较简单的函数修饰为内联之后，在调用的时候会直接使用函数体之中的片段，省略掉调用的开销。但是对于逻辑比较复杂的函数，即使强制指定为<code>inline</code>，编译器也不会将其当作内联函数来处理。</p><h2 id="类内定义"><a href="#类内定义" class="headerlink" title="类内定义"></a>类内定义</h2><p>类内定义是指将函数体的实现放在类的内部，这个时候编译器就会将其当作内联函数来进行处理。</p><pre class="line-numbers language-c++"><code class="language-c++">class Dog{    public:        void set_name(string _name){            //to do            name = _name;        }    private:        string name;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非root权限安装pip和其他python包</title>
      <link href="/2019/10/21/fei-root-quan-xian-an-zhuang-pip-he-qi-ta-python-bao/"/>
      <url>/2019/10/21/fei-root-quan-xian-an-zhuang-pip-he-qi-ta-python-bao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当拿到服务器账号却没有root权限的时候，导致很多安装受到阻碍。这里给出一种创建虚拟环境的办法进行解决，主要原理在于圈定自己的一个运行范围。</p></blockquote><h1 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装<code>pip</code></h1><pre class="line-numbers language-shell"><code class="language-shell">wget https://bootstrap.pypa.io/get-pip.pypython get-pip.py --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的python如果是2.7就按照的是<code>pip2</code>， 如果是3就安装<code>pip3</code>。</p><p>一定记得使用 –user 参数否则你还是没有权限。</p><p>安装完成后会在家目录下生成 <code>.local</code> 文件夹，里面有<code>bin</code>和<code>lib</code>， <code>bin</code> 里就有我们需要的<code>pip</code>、<code>easy_install</code><br>如果想直接使用，需要加入环境变量。</p><pre class="line-numbers language-shell"><code class="language-shell">export PATH=~/.local/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安装其他包"><a href="#安装其他包" class="headerlink" title="安装其他包"></a>安装其他包</h1><p>有了<code>pip</code>我们就可以很方便的安装其他包了</p><pre class="line-numbers language-shell"><code class="language-shell">pip install --user virtualenv（包名称）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样你需要的包就会被安装在 <code>~/.local</code> 目录。</p><h1 id="虚拟环境-virtualenv"><a href="#虚拟环境-virtualenv" class="headerlink" title="虚拟环境 virtualenv"></a>虚拟环境 <code>virtualenv</code></h1><p>很多时候我们不同的项目需要的包的版本不同，我们可以采用<code>virtualenv</code>做一个独立的生态系统。</p><pre class="line-numbers language-shell"><code class="language-shell"># 安装virtualenvpip install --user virtualenvvirtualenv envsource env/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就进入了一个独立的python环境，再用pip安装就可以了。具体的使用可以搜索。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试密码</title>
      <link href="/2019/10/20/ce-shi-mi-ma/"/>
      <url>/2019/10/20/ce-shi-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="测试开文件"><a href="#测试开文件" class="headerlink" title="测试开文件"></a>测试开文件</h1><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>int main(){    cout << "ok"<<endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2018/01/22/2017-conclusion/"/>
      <url>/2018/01/22/2017-conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66"></iframe></div># 2017![](1.jpg)![](2.jpg)![](3.jpg)<h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
